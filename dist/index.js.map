{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import type { Sql, Helper } from 'postgres'\nimport type * as ExpressSession from 'express-session'\nimport type { EventEmitter } from 'node:events'\n\nexport interface PostgresStoreOptions extends EventEmitterOptions {\n  postgres: Sql<any>;\n  tableName?: string;\n  schemaName?: string;\n  ttl?: number;\n  disableTouch?: boolean;\n  createTableIfMissing?: boolean;\n  pruneSessionInterval?: false | number;\n  pruneSessionRandomizedInterval?: false | ((delay: number) => number);\n  errorLog?: (message: string, err: unknown) => void;\n}\n\ndeclare class PostgresStore extends ExpressSession.Store {\n  constructor(options: PostgresStoreOptions);\n\n  get(sid: string, callback: (err: any, session?: ExpressSession.SessionData | null) => void): void;\n  set(sid: string, session: ExpressSession.SessionData, callback?: (err?: any) => void): void;\n  destroy(sid: string, callback?: (err?: any) => void): void;\n  all(callback: (err: any, obj?: ExpressSession.SessionData[] | { [sid: string]: ExpressSession.SessionData; } | null) => void): void;\n  length(callback: (err: any, length: number) => void): void;\n  clear(callback?: (err?: any) => void): void;\n  touch(sid: string, session: ExpressSession.SessionData, callback?: () => void): void;\n\n  close(): Promise<void>;\n  pruneSessions(callback?: (err?: any) => void): Promise<void>;\n}\n\ntype PostgresStoreCtor = typeof PostgresStore;\n\nexport type { PostgresStore, PostgresStoreCtor };\n\ntype EventEmitterOptions = NonNullable<((typeof EventEmitter) extends new (options: infer R) => any ? R : never)>;\n\ninterface PostgresSession {\n  sid: string,\n  sess: ExpressSession.SessionData,\n  expire: number\n}\n\nconst delayUnref = (duration: number) => new Promise(res => setTimeout(res, duration).unref());\n\nexport default ({ Store }: typeof import('express-session')): typeof PostgresStore => class PostgresStore extends Store implements ExpressSession.Store {\n  private sql: Sql<any>;\n  private tableName: string;\n  private tableNameHelper: Helper<string>;\n  private ttl: number;\n  private disableTouch: boolean;\n  private tableCreationPromise: Promise<unknown> | null = null;\n  private closed: boolean = false;\n\n  public constructor(options: PostgresStoreOptions) {\n    super(options);\n    this.sql = options.postgres;\n    this.tableName = options.tableName ?? 'session'\n    if (options.schemaName !== undefined)\n      this.tableName = `${options.schemaName}.${this.tableName}`;\n    this.tableNameHelper = this.sql(this.tableName);\n    this.ttl = options.ttl ?? 86400; // One day by default\n    this.tableCreationPromise = !options.createTableIfMissing\n      ? Promise.resolve() // disable lazy-loading\n      : null;\n    this.disableTouch = options.disableTouch ?? false;\n    if (options.pruneSessionInterval !== false)\n      (async (interval, randomize, errorLog) => {\n        while (!this.closed) {\n          try {\n            await delayUnref(randomize(interval));\n            if (!this.closed)\n              await this.pruneSessions();\n          } catch (err) {\n            errorLog('Failed to prune sessions:', err);\n          }\n        }\n      })(\n        // interval\n        (options.pruneSessionInterval ?? 60 * 15) * 1000,\n\n        // randomize\n        options.pruneSessionRandomizedInterval !== false ? options.pruneSessionRandomizedInterval !== undefined\n          ? options.pruneSessionRandomizedInterval // user-provided randomizer\n          : ((delay: number) => Math.ceil(delay / 2 + delay * Math.random())) // default randomizer\n          : ((delay: number) => delay), // no randomizer\n\n        // errorLog\n        options.errorLog ?? console.error.bind(console)\n      )\n  }\n\n  private async beforeDatabaseAccess() {\n    if (this.closed)\n      throw new Error('Store closed by the user');\n\n    // only true when `options.createTableIfMissing` is true and\n    // this is the first call to `createTableIfNeeded()`\n    if (this.tableCreationPromise === null)\n      this.tableCreationPromise =\n        this.sql<[{ result: object | null }]>`SELECT to_regclass(${this.tableName}::text) AS result`\n          .catch(() => [{ result: null }])\n          .then(async ([{ result }]) => {\n            if (result !== null) // table exists\n              return;\n\n            // we cannot use `this.postgres.file` here because\n            // the table name must match `this.tableName`\n\n            // we use .. because this code will be compiled\n            // to /dist/index.js but we need /table.sql \n            const tableFile = require('path').resolve(__dirname, '../table.sql');\n\n            const escapedTableName = `\"${this.tableName.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"')}\"`;\n\n            const createTable = await require('fs').promises.readFile(tableFile, 'utf8');\n\n            await this.sql.unsafe(\n              createTable\n                .replace(/\"session\"/g, escapedTableName)\n            );\n          })\n\n    await this.tableCreationPromise;\n  }\n\n  private getExpireTime(sess: ExpressSession.SessionData) {\n    return new Date(Math.ceil((\n      sess?.cookie?.expires ?? new Date(Date.now() + this.ttl * 1000)\n    ).getTime() / 1000) * 1000);\n  }\n\n  async pruneSessions(callback: (err?: any) => void = () => { }) {\n    const now = new Date(Math.ceil(Date.now() / 1000) * 1000);\n    try {\n      await this.beforeDatabaseAccess();\n      await this.sql`\n        DELETE FROM ${this.tableNameHelper}\n        WHERE expire < ${now}\n      `\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  async close() {\n    if (this.closed)\n      return;\n    this.closed = true;\n    await this.sql.end();\n  }\n\n  async get(sid: string, callback: (err: any, session?: ExpressSession.SessionData | null) => void) {\n    try {\n      await this.beforeDatabaseAccess();\n      const [{ sess } = { sess: null }] = await this.sql<[Pick<PostgresSession, 'sess'>?]>`\n        SELECT sess\n        FROM ${this.tableNameHelper}\n        WHERE sid = ${sid}\n      `;\n      callback(null, sess);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  async set(sid: string, session: ExpressSession.SessionData, callback?: (err?: any) => void) {\n    try {\n      await this.beforeDatabaseAccess();\n      const sess = this.sql.json(session);\n      const expire = this.getExpireTime(session);\n      await this.sql`\n        INSERT INTO ${this.tableNameHelper} (sess, expire, sid)\n        VALUES (${sess}, ${expire}, ${sid})\n        ON CONFLICT (sid) DO UPDATE\n        SET sess = ${sess}, expire = ${expire}\n      `;\n      callback?.();\n    } catch (err) {\n      callback?.(err);\n    }\n  }\n\n  async destroy(sid: string, callback?: (err?: any) => void) {\n    try {\n      await this.beforeDatabaseAccess();\n      await this.sql`\n        DELETE FROM ${this.tableNameHelper}\n        WHERE sid = ${sid}\n      `;\n      callback?.();\n    } catch (err) {\n      callback?.(err);\n    }\n  }\n\n  async all(callback: (err: any, obj?: ExpressSession.SessionData[] | { [sid: string]: ExpressSession.SessionData; } | null) => void) {\n    try {\n      await this.beforeDatabaseAccess();\n      const sessions: ExpressSession.SessionData[] = [];\n      await this.sql<Pick<PostgresSession, 'sess'>[]>`\n        SELECT sess FROM ${this.tableNameHelper}\n      `\n        .stream(({ sess }) => sessions.push(sess))\n      callback(null, sessions);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  async length(callback: (err: any, length: number) => void) {\n    try {\n      await this.beforeDatabaseAccess();\n      const [{ length }] = await this.sql<[{ length: number }]>`\n        SELECT COUNT(sid) AS length\n        FROM ${this.tableNameHelper}\n      `\n      callback(null, length);\n    } catch (err) {\n      callback(err, 0);\n    }\n  }\n\n  async clear(callback?: (err?: any) => void) {\n    try {\n      await this.beforeDatabaseAccess();\n      await this.sql`\n        DELETE FROM ${this.tableNameHelper}\n      `;\n      callback?.();\n    } catch (err) {\n      callback?.(err);\n    }\n  }\n\n  async touch(sid: string, session: ExpressSession.SessionData, callback?: () => void) {\n    if (!this.disableTouch)\n      try {\n        await this.beforeDatabaseAccess();\n        await this.sql`\n          UPDATE ${this.tableNameHelper}\n          SET expire = ${this.getExpireTime(session)}\n          WHERE sid = ${sid}\n        `;\n      } catch (err) { }\n    callback?.();\n  }\n}\n"],"names":[],"mappings":"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"}